{
  "_args": [
    [
      {
        "raw": "node-horseman@https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
        "scope": null,
        "escapedName": "node-horseman",
        "name": "node-horseman",
        "rawSpec": "https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
        "spec": "https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
        "type": "remote"
      },
      "/Users/briangallagher/dev/apps/openshiftnavigate/openshift-navigate-cloud"
    ]
  ],
  "_from": "node-horseman@3.1.1",
  "_id": "node-horseman@3.1.1",
  "_inCache": true,
  "_location": "/node-horseman",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-horseman@https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
    "scope": null,
    "escapedName": "node-horseman",
    "name": "node-horseman",
    "rawSpec": "https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
    "spec": "https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
  "_shasum": "16a1376fb8e64e21ade16fdd89cd827ee40a6e56",
  "_shrinkwrap": null,
  "_spec": "node-horseman@https://registry.npmjs.org/node-horseman/-/node-horseman-3.1.1.tgz",
  "_where": "/Users/briangallagher/dev/apps/openshiftnavigate/openshift-navigate-cloud",
  "author": {
    "name": "John Titus",
    "email": "john.titus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/johntitus/node-horseman/issues"
  },
  "contributors": [
    {
      "name": "John Titus",
      "email": "john.titus@gmail.com"
    },
    {
      "name": "Alex Layton",
      "email": "alex@layton.in",
      "url": "http://alex.layton.in"
    }
  ],
  "dependencies": {
    "bluebird": "^3.0.1",
    "clone": "^1.0.2",
    "cookies.txt": "^0.1.1",
    "data-uri-to-buffer": "0.0.4",
    "debug": "^2.1.1",
    "defaults": "~1.0.0",
    "node-phantom-simple": "^2.2.4"
  },
  "description": "Run PhantomJS from Node",
  "devDependencies": {
    "express": "^4.10.4",
    "hoxy": "^3.2.0",
    "mocha": "^2.2.5",
    "mocha.parallel": "^0.12.0",
    "request": "^2.69.0",
    "semver": "^5.1.0",
    "should": "^8.2.2"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/johntitus/node-horseman#readme",
  "keywords": [
    "phantomjs",
    "horseman",
    "headless",
    "browser"
  ],
  "license": "MIT",
  "main": "lib/index",
  "name": "node-horseman",
  "optionalDependencies": {},
  "readme": "Horseman\n=========\n\n[![Build Status](https://travis-ci.org/johntitus/node-horseman.svg?branch=master)](https://travis-ci.org/johntitus/node-horseman)\n\nHorseman lets you run [PhantomJS](http://phantomjs.org/) from Node.\n\nHorseman has:\n\n  * a simple chainable (Promise based) API,\n  * an easy-to-use control flow (see the examples),\n  * support for multiple tabs being open at the same time,\n  * built in jQuery for easier page manipulation,\n  * built in bluebird for easier in-browser async.\n\n## Examples\n\n### Search on Google\n\n```js\nvar Horseman = require('node-horseman');\nvar horseman = new Horseman();\n\nhorseman\n  .userAgent('Mozilla/5.0 (Windows NT 6.1; WOW64; rv:27.0) Gecko/20100101 Firefox/27.0')\n  .open('http://www.google.com')\n  .type('input[name=\"q\"]', 'github')\n  .click('[name=\"btnK\"]')\n  .keyboardEvent('keypress', 16777221)\n  .waitForSelector('div.g')\n  .count('div.g')\n  .log() // prints out the number of results\n  .close();\n```\n\nSave the file as `google.js`. Then, `node google.js`.\n\n### Count Twitter Followers Concurrently\n\n```js\nconst Horseman = require('node-horseman');\nconst users = ['PhantomJS', 'nodejs'];\n\nusers.forEach((user) => {\n    const horseman = new Horseman();\n    horseman\n        .open(`http://twitter.com/${user}`)\n        .text('.ProfileNav-item--followers .ProfileNav-value')\n        .then((text) => {\n            console.log(`${user}: ${text}`);\n        })\n        .close();\n});\n```\n\nSave the file as `twitter.js`. Then, `node twitter.js`.\n\n### For longer examples, check out the Examples folder.\n\n## Installation\n\n`npm install node-horseman`\n\nNote: Make sure PhantomJS is available in your path,\nyou have the phantomjs-prebuilt/phantomjs npm package installed,\nor use the `phantomPath` option.\n\n## API\n\n### Setup\n\n#### new Horseman(options)\n\nCreate a new instance that can navigate around the web.\n\nThe available options are:\n\n  * `clientScripts` an array of local JavaScript files to load onto each page.\n  * `timeout`: how long to wait for page loads or wait periods,\n    default `5000` ms.\n  * `interval`: how frequently to poll for page load state, default `50` ms.\n  * `loadImages`: load all inlined images, default `true`.\n  * `switchToNewTab`: switch to new tab when created, default `false`.\n  * `cookiesFile`: A file where to store/use cookies.\n  * `ignoreSSLErrors`: ignores SSL errors,\n    such as expired or self-signed certificate errors.\n  * `sslProtocol`: sets the SSL protocol for secure connections\n    `[sslv3|sslv2|tlsv1|any]`, default `any`.\n  * `webSecurity`: enables web security and forbids cross-domain XHR.\n  * `injectJquery`: whether jQuery is automatically loaded into each page.\n    Default is `true`.\n    If jQuery is already present on the page, it is not injected.\n  * `injectBluebird`: whether bluebird is automatically loaded into each page.\n    Default is `false`.\n    If `true` and `Promise` is already present on the page, it is not injected.\n    If `'bluebird'` it is always injected as Bluebird,\n    whether Promise is present or not.\n  * `bluebirdDebug`: whether or not to enable bluebird debug features.\n    Default is `false`.\n    If `true` non-minified bluebird is injected\n    and long stack traces are enabled\n  * `proxy`: specify the proxy server to use `address:port`, default not set.\n  * `proxyType`: specify the proxy server type `[http|socks5|none]`,\n    default not set.\n  * `proxyAuth`: specify the auth information for the proxy `user:pass`,\n    default not set.\n  * `phantomPath`: If PhantomJS is not installed in your path,\n    you can use this option to specify the executable's location.\n  * `debugPort`: Enable web inspector on specified port, default not set.\n  * `debugAutorun`: Autorun on launch when in debug mode, default is true.\n\n### Configuration\n\n#### .setProxy(ip, \\[port\\], \\[type\\], \\[user, pass\\])\n\nDynamically set proxy settings (***requires PhantomJS 2.0.0 or above***).\nThe `ip` argument can either be the IP of the proxy server,\nor a URI of the form `type://user:pass@ip:port`.\n\nThe `port` is optional and defaults to `80`.\nThe `type` is optional and defaults to `'http'`.\nThe `user` and `pass` are the optional username and password for authentication,\nby default no authentication is used.\n\n### Cleanup\n\nBe sure to `.close()` each Horseman instance when you're done with it!\n\n#### .close()\n\nCloses the Horseman instance by shutting down PhantomJS.\n\n### Navigation\n\n#### .open(url)\n\nLoad the page at `url`.\n\n#### .post(url, postData)\n\nPOST `postData` to the page at `url`.\n\n#### .put(url, putData)\n\nPUT `putData` to the page at `url`.\n\n#### .back()\n\nGo back to the previous page.\n\n#### .forward()\n\nGo forward to the next page.\n\n#### .status()\n\nThe HTTP status code returned for the page just opened.\n\n#### .reload()\n\nRefresh the current page.\n\n#### .cookies(\\[object|array of objects|string\\])\n\nWithout any options,\nthis function will return all the cookies inside the browser.\n\n```js\nhorseman\n  .open('http://httpbin.org/cookies')\n  .cookies()\n  .log() // []\n  .close();\n```\n\nYou can pass in a cookie object to add to the cookie jar.\n\n```js\nhorseman\n  .cookies({\n    name: 'test',\n    value: 'cookie',\n    domain: 'httpbin.org'\n  })\n  .open('http://httpbin.org/cookies')\n  .cookies()\n  .then(function(cookies){\n    console.log(cookies);\n    return horseman.close();\n  });\n\n/*\n[ { domain: '.httpbin.org',\n    httponly: false,\n    name: 'test',\n    path: '/',\n    secure: false,\n    value: 'cookie' } ]\n*/\n```\n\nYou can pass in an array of cookie objects\nto reset all the cookies in the cookie jar\n(or pass an empty array to remove all cookies).\n\n```js\nhorseman\n  .cookies([\n  {\n    name : 'test2',\n    value : 'cookie2',\n    domain: 'httpbin.org'\n  },\n  {\n    name : 'test3',\n    value : 'cookie3',\n    domain: 'httpbin.org'\n  }])\n  .open('http://httpbin.org/cookies')\n  .cookies()\n  .then(function(cookies){\n    console.log(cookies.length); // 2\n    return horseman.close();\n  });\n\n```\n\n[cookies.txt]: <http://www.cookiecentral.com/faq/#3.5>\nYou can pass in the name of a [cookies.txt][] formatted file\nto reset all the cookies in the cookie jar\nto those contained in the file.\n\n```js\nhorseman\n  .cookies('my-cookies.txt')\n  .open('http://httpbin.org/cookies')\n  .cookies()\n  .then(function(cookies){\n    console.log(cookies);\n    return horseman.close();\n  });\n\n  /* Cookies from my-cookies.txt (converted to the above object format) */\n\n```\n\n#### .userAgent(userAgent)\n\nSet the `userAgent` used by PhantomJS.\nYou have to set the userAgent before calling `.open()`.\n\n#### .headers(headers)\n\nSet the `headers` used when requesting a page.\nThe headers are a javascript object.\nYou have to set the headers before calling `.open()`.\n\n#### .authentication(user, password)\n\nSet the `user` and `password` for accessing a web page\nusing basic authentication.\nBe sure to set it before calling `.open(url)`.\n\n```js\nhorseman\n  .authentication('myUserName', 'myPassword')\n  .open('http://httpbin.org/basic-auth/myUserName/myPassword')\n  .html('pre')\n  .then(function(body) {\n    console.log(body);\n    /*\n        {\n        \"authenticated\": true,\n        \"user\": \"myUserName\"\n      }\n    */\n    return horseman.close();\n  });\n```\n\n#### .viewport(width, height)\n\nSet the `width` and `height` of the viewport, useful for screenshotting.\nYou have to set the viewport before calling `.open()`.\n\n#### .scrollTo(top, left)\n\nScroll to a position on the page,\nrelative to the top left corner of the document.\n\n#### .zoom(zoomFactor)\n\nSet the amount of zoom on a page.  The default zoomFactor is 1.\nTo zoom to 200%, use a zoomFactor of 2.\nCombine this with `viewport` to produce high DPI screenshots.\n\n```js\nhorseman\n  .viewport(3200,1800)\n  .zoom(2)\n  .open('http://www.horsemanjs.org')\n  .screenshot('big.png')\n  .close();\n```\n\n### Evaluation\n\nEvaluation elements return information from the page.\n\n#### .title()\n\nGet the title of the current page.\n\n#### .url()\n\nGet the URL of the current page.\n\n#### .visible(selector)\n\nDetermines if a selector is visible, or not, on the page. Returns a boolean.\n\n#### .exists(selector)\n\nDetermines if the selector exists, or not, on the page. Returns a boolean.\n\n#### .count(selector)\n\nCounts the number of `selector` on the page. Returns a number.\n\n#### .html(\\[selector\\], \\[file\\])\n\nGets the HTML inside of an element.\nIf no `selector` is provided, it returns the HTML of the entire page.\nIf `file` is provided, the HTML will be written to that filename.\n\n#### .text(selector)\n\nGets the text inside of an element.\n\n#### .plainText()\n\nGets the plain text of the whole page (using PhantomJS's [`plainText`](http://phantomjs.org/api/webpage/property/plain-text.html) property).\n\n#### .value(selector, \\[val\\])\n\nGet, or set, the value of an element.\n\n#### .attribute(selector, attribute)\n\nGets an attribute of an element.\n\n#### .cssProperty(selector, property)\n\nGets a CSS property of an element.\n\n#### .width(selector)\n\nGets the width of an element.\n\n#### .height(selector)\n\nGets the height of an element.\n\n#### .screenshot(path)\n\nSaves a screenshot of the current page to the specified `path`.\nUseful for debugging.\n\n#### .screenshotBase64(type)\n\nReturns a base64 encoded string representing the screenshot.\nType must be one of 'PNG', 'GIF', or 'JPEG'.\n\n#### .crop(area, path)\n\nTakes a cropped screenshot of the page.\n`area` can be a string identifying an html element on the screen to crop to,\nor a getBoundingClientRect object.\n\n#### .cropBase64(area, path)\n\nTakes a cropped base64 encoded screenshot of the page.\n`area` can be a string identifying an html element on the screen to crop to,\nor a getBoundingClientRect object.\n\n#### .pdf(path, \\[paperSize\\])\n\n[US Letter]: <http://en.wikipedia.org/wiki/Letter_%28paper_size%29>\nRenders the page as a PDF.\nThe default paperSize is [US Letter][].\n\nThe `paperSize` object should be in either this format:\n\n```js\n{\n  width: '200px',\n  height: '300px',\n  margin: '0px'\n}\n```\n\nor this format\n\n```js\n{\n  format: 'A4',\n  orientation: 'portrait',\n  margin: '1cm'\n}\n```\n\nSupported formats are: `A3`, `A4`, `A5`, `Legal`, `Letter`, `Tabloid`.\n\nOrientation (`portrait`, `landscape`) is optional and defaults to 'portrait'.\n\nSupported dimension units are: 'mm', 'cm', 'in', 'px'. No unit means 'px'.\n\nYou can create a header and footer like this:\n\n```js\nhorseman\n  .open('http://www.amazon.com')\n  .pdf('amazon.pdf', {\n    format: 'Letter',\n    orientation: 'portrait',\n    margin: '0.5in',\n    header: {\n      height: '3cm',\n      contents: function(pageNum, numPages) {\n        if (pageNum == 1) {\n          return '';\n        }\n        return '<h3>Header ' + pageNum + ' / ' + numPages + '</h3>';\n      }\n    },\n    footer: {\n      height: '3cm',\n      contents: function(pageNum, numPages) {\n        if (pageNum == 1) {\n          return '';\n        }\n        return '<h3>Footer ' + pageNum + ' / ' + numPages + '</h3>';\n      }\n    }\n  })\n  .close()\n```\n\n#### .log()\n\nOutputs the results of the last call in the chain, or a string you provide,\nwithout breaking the chain.\n\n```js\nhorseman\n  .open('http://www.google.com')\n  .count('a')\n  .log() // outputs the number of anchor tags\n  .click('a')\n  .log('clicked the button') //outputs the string\n  .close();\n```\n\n#### .do(fn)\n\nRun an function without breaking the chain. Works with asynchronous functions.\nMust call the callback when complete.\n\n```js\nhorseman\n  .open('http://www.google.com')\n  .do(function(done){\n    setTimeout(done,1000);\n  })\n  .close();\n```\n\n#### .evaluate(fn, \\[arg1, arg2,...\\])\n\nInvokes `fn` on the page with args. On completion it returns a value.\nUseful for extracting information from the page.\n\n```js\nhorseman\n  .open('http://en.wikipedia.org/wiki/Headless_Horseman')\n  .evaluate( function(selector){\n      // This code is executed inside the browser.\n      // It's sandboxed from Node, and has no access to anything\n      // in Node scope, unless you pass it in, like we did with 'selector'.\n      //\n      // You do have access to jQuery, via $, automatically.\n      return {\n        height : $( selector ).height(),\n        width : $( selector ).width()\n      }\n    }, '.thumbimage')\n  .then(function(size){\n    console.log(size);\n    return horseman.close();\n  });\n```\n\nCan be used in an asynchronous way as well (with a node-style callback).\nThis is similar to `.do`, but `fn` is invoked in the browser.\n\n```js\nhorseman\n  .open('http://en.wikipedia.org/wiki/Headless_Horseman')\n  .evaluate(function(ms, done){\n    var start = Date.now();\n    setTimeout(function() {\n      done(null, Date.now() - start);\n      // ^ Can pass an Error as first argument,\n      // making evaluate action reject its Promise in Node.\n      // Second argument is what the Promise will resolve to.\n    }, ms);\n  }, 100)\n  .then(function(actualMs){\n    console.log(actualMs);\n  })\n  .close();\n```\n\nLastly, if `fn` returns a Promise or thenable,\nit will be waited on and the action in Node will resolve/reject accordingly.\n\n```js\nhorseman\n  .open('http://en.wikipedia.org/wiki/Headless_Horseman')\n  .evaluate(function() {\n    // Silly example for illustrative purposes.\n    return Bluebird.delay(100).return('Hello World');\n  })\n  .then(function(mesg){\n    // Will log 'Hello World' after a roughly 100 ms delay.\n    console.log(mesg);\n  })\n  .close();\n```\n\n#### .click(selector)\n\nClicks the `selector` element once.\n\n#### .select(selector, value)\n\nSets the value of a `select` element to `value`.\n\n#### .clear(selector)\n\nSets the value of an element to `''`.\n\n#### .type(selector, text, \\[options\\])\n\nEnters the `text` provided into the `selector` element.\nOptions is an object containing `eventType`\n(`'keypress'`, `'keyup'`, `'keydown'`. Default is `'keypress'`)\nand `modifiers`, which is a string in the form of `ctrl+shift+alt`.\n\n#### .upload(selector, path)\n\nSpecify the `path` to upload into a file input `selector` element.\n\n#### .download(url, \\[path\\], \\[binary\\])\n\nDownload the contents of `url`.\nIf `path` is supplied the contents will be written there,\notherwise this gets the contents.\nIf `binary` is `true` it gets the contents as a node `Buffer`,\notherwise it gets them as a string (`binary` defaults to `false`).\n\n***Please note: binary downloads do not work correctly with PhantomJS 1.x***\n\n\n#### .injectJs(file)\n\nInject a JavaScript file onto the page.\n\n#### .includeJs(url)\n\nInclude an external JavaScript script on the page via URL.\n\n#### .mouseEvent(type, \\[x, y, \\[button\\]\\])\n\nSend a mouse event to the page.\nEach event is sent to the page as if it comes from real user interaction.\n`type` must be one of\n`'mouseup'`, `'mousedown'`, `'mousemove'`, `'doubleclick'`, or `'click'`,\nwhich is the default.\n`x` and `y` are optional\nand specify the location on the page to send the mouse event.\n`button` is also optional, and defaults to `'left'`.\n\n#### .keyboardEvent(type, key, \\[modifier\\])\n\n[phantom keys]: <https://github.com/ariya/phantomjs/commit/cab2635e66d74b7e665c44400b8b20a8f225153a>\nSend a keyboard event to the page.\nEach event is sent to the page as if it comes from real user interaction.\n`type` must be one of `'keyup'`, `'keydown'`, or `'keypress'`,\nwhich is the default.\n`key` should be a numerical value from [this page][phantom keys].\nFor instance, to send an \"enter\" key press,\nuse `.keyboardEvent('keypress',16777221)`.\n\n`modifier` is optional, and comes from this list:\n\n  * 0x02000000: A Shift key on the keyboard is pressed\n  * 0x04000000: A Ctrl key on the keyboard is pressed\n  * 0x08000000: An Alt key on the keyboard is pressed\n  * 0x10000000: A Meta key on the keyboard is pressed\n  * 0x20000000: A keypad button is pressed\n\nTo send a shift+p event,\nyou would use `.keyboardEvent('keypress','p',0x02000000)`.\n\n### Waiting\n\nThese functions for the browser to wait for an event to occur.\nIf the event does not occur before the timeout period\n(configurable via the options),\na timeout event will be fired and the Promise for the action will reject.\n\n#### .wait(ms)\n\nWait for `ms` milliseconds e.g. `.wait(5000)`\n\n#### .waitForNextPage()\n\nWait until a page finishes loading, typically after a `.click()`.\n\n#### .waitForSelector(selector)\n\nWait until the element `selector` is present,\ne.g., `.waitForSelector('#pay-button')`\n\n#### .waitFor(fn, \\[arg1, arg2,...\\], value)\n\nWait until the `fn` evaluated on the page returns the *specified* `value`.\n`fn` is invoked with args.\n\n```js\n// This will call the function in the browser repeatedly\n// until true (or whatever else you specified) is returned\nhorseman\n  .waitFor(function waitForSelectorCount(selector, count) {\n    return $(selector).length >= count\n  }, '.some-selector', 2, true)\n  // last argument (true here) is what return value to wait for\n```\n\n### Frames\n\n#### .frameName()\n\nGet the name of the current frame.\n\n#### .frameCount()\n\nGet the number of frames inside the current frame.\n\n#### .frameNames()\n\nGet the names of the frames inside the current frame.\n\n#### .switchToFocusedFrame()\n\nSwitch to the frame that is in focus.\n\n#### .switchToFrame(nameOrPosition)\n\nSwitch to the frame specified by a frame name or a frame position.\n\n#### .switchToMainFrame()\n\nSwitch to the main frame of the page.\n\n#### .switchToParentFrame()\n\nSwitch to the parent frame of the current frame.\nResolves to `true` it switched frames\nand `false` if it did not (i.e., the main frame was the current frame).\n\n### Tabs\n\nHorseman supports multiple tabs being open at the same time.\n\n#### .openTab(url)\n\nOpen a URL in a new tab. Fires a `tabCreated` event.\nAlso, the newly created tab becomes the current tab.\n\n#### .tabCount()\n\nReturns the number of tabs currently open.\n\n#### .switchToTab(tabnumber)\n\nSwitch to another tab. Count starts at 0.\n\n#### .closeTab(tabNum)\n\nClose an open tab. Count starts at 0.\n\n### Events\n\n#### .on(event, callback)\n\nRespond to page events with the callback.\nBe sure to set these before calling `.open()`.\nThe `callback` is evaluated in node.\nIf you need to return from `callback`, you probably want `.at` instead.\n\nSupported events are:\n\n  * `initialized` - callback()\n  * `loadStarted` - callback()\n  * `loadFinished` - callback(status)\n  * `tabCreated` - callback(tabNum)\n  * `tabClosed` - callback(tabNum)\n  * `urlChanged` - callback(targetUrl)\n  * `navigationRequested` - callback(url, type, willNavigate, main)\n  * `resourceRequested` - callback(requestData, networkRequest)\n  * `resourceReceived` - callback(response)\n  * `consoleMessage` - callback(msg, lineNumber, sourceId)\n  * `alert` - callback(msg)\n  * `confirm` - callback(msg)\n  * `prompt` - callback(msg, defaultValue)\n  * `error` - callback(msg, trace)\n  * `timeout` - callback(msg) - Fired when a wait timeout period elapses.\n\n[the full callbacks list for phantomjs]: <https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#callbacks-list>\nFor a more in depth description, see [the full callbacks list for phantomjs][].\n\n```js\nhorseman\n  .on('consoleMessage', function( msg ){\n    console.log(msg);\n  })\n```\n\n#### .at(event, callback)\n\nRespond to page events with the callback.\nBe sure to set these before calling `.open()`.\nThe `callback` is evaluated in PhantomJS.\nIf you do not need to return from `callback`, you probably want `.on` instead.\n\nUseful events are:\n\n  * `confirm` - callback(msg)\n  * `prompt` - callback(msg, defaultVal)\n  * `filePicker` - callback(oldFile)\n\nFor a more in depth description, see [the full callbacks list for phantomjs][].\n\n```js\nhorseman\n  .at('confirm', function(msg) {\n    return msg === 'Like this?' ? true : false;\n  })\n```\n\n### Extending Horseman\n\nYou can add your own actions to horseman with `Horseman.registerAction`.\nBe sure to register all actions *before* calling the constructor.\n\n```js\nHorseman.registerAction('size', function(selector) {\n  // The function will be called with the Horseman instance as this\n  var self = this;\n  // Return the horseman chain, or any Promise\n  return this\n    .waitForSelector(selector)\n    .then(function() {\n      return {\n        w: self.width(selector),\n        h: self.height(selector)\n      };\n    })\n    .props();\n});\n\nvar horseman = new Horseman();\nhorseman\n  .open('http://example.org')\n  .size('body')\n  .log() // { w: 400, h: 240 }\n  .close();\n```\n\n\n### Yielding\n\n[co]: <https://github.com/tj/co>\nYou can use yields with Horseman with a library like [co][].\n\n```js\nvar Horseman = require('node-horseman'),\n  co = require('co');\n\nvar horseman = new Horseman();\n\nco(function *(){\n  yield horseman.open('http://www.google.com');\n  var title = yield horseman.title();\n  var numLinks = yield horseman.count('a');\n  console.log('Title: ' + title); //Google\n  console.log('Num Links: ' + numLinks); //35\n  yield horseman.close();\n}).catch(function(e){\n  console.log(e)\n});\n```\n\nIf you use yields, you may need to use the harmony flag when you run your file:\n\n```shell-session\nnode --harmony test.js\n```\n\n### Debug\n\nTo run the same file with debugging output,\nrun it like this `DEBUG=horseman node myfile.js`.\n\nThis will print out some additional information about what's going on:\n\n```shell-session\nhorseman .setup() creating phantom instance 1 +0ms\nhorseman load finished, injecting jquery and client scripts +401ms\nhorseman injected jQuery +0ms\nhorseman .open: http://www.google.com +66ms\nhorseman .type() horseman into input[name='q'] +51ms\n```\n\n### Tests\n\n[Mocha]: <http://visionmedia.github.io/mocha/>\n[Should]: <https://github.com/shouldjs/should.js>\nAutomated tests for Horseman itself are run using [Mocha][] and [Should][],\nboth of which will be installed via `npm install`.\nTo run Horseman's tests, just do `npm test`.\n\nWhen the tests are done, you'll see something like this:\n\n```shell-session\n$ npm test\n  102 passing (42s)\n  2 pending\n\n```\n\n## License (MIT)\n\n```\nWWWWWW||WWWWWW\n W W W||W W W\n      ||\n    ( OO )__________\n     /  |           \\\n    /o o|    MIT     \\\n    \\___/||_||__||_|| *\n         || ||  || ||\n        _||_|| _||_||\n       (__|__|(__|__|\n```\n\nCopyright (c) John Titus <john.titus@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/johntitus/node-horseman.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "3.1.1"
}
