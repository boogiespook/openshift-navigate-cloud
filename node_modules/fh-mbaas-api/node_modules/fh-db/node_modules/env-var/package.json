{
  "_args": [
    [
      {
        "raw": "env-var@https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
        "scope": null,
        "escapedName": "env-var",
        "name": "env-var",
        "rawSpec": "https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
        "spec": "https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
        "type": "remote"
      },
      "/Users/briangallagher/dev/apps/openshiftnavigate/OpenShiftNavigate-Navigate/node_modules/fh-mbaas-api"
    ]
  ],
  "_from": "https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
  "_id": "env-var@2.4.3",
  "_inCache": true,
  "_location": "/fh-mbaas-api/fh-db/env-var",
  "_phantomChildren": {},
  "_requested": {
    "raw": "env-var@https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
    "scope": null,
    "escapedName": "env-var",
    "name": "env-var",
    "rawSpec": "https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
    "spec": "https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/fh-mbaas-api/fh-db"
  ],
  "_resolved": "https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
  "_shasum": "19ee1414c110c260d90715cea964c0ff49188995",
  "_shrinkwrap": null,
  "_spec": "env-var@https://registry.npmjs.org/env-var/-/env-var-2.4.3.tgz",
  "_where": "/Users/briangallagher/dev/apps/openshiftnavigate/OpenShiftNavigate-Navigate/node_modules/fh-mbaas-api",
  "author": {
    "name": "Evan Shortiss"
  },
  "bugs": {
    "url": "https://github.com/evanshortiss/env-var/issues"
  },
  "dependencies": {
    "verror": "~1.6.1"
  },
  "description": "Solution for loading and sanatizing environment variables in node.js with correct typings",
  "devDependencies": {
    "chai": "3.5.0",
    "coveralls": "~2.13.0",
    "mocha": "2.4.5",
    "mocha-lcov-reporter": "~1.3.0",
    "nyc": "~10.2.0"
  },
  "engines": {
    "node": ">=0.10"
  },
  "files": [
    "lib/",
    "env-var.d.ts"
  ],
  "homepage": "https://github.com/evanshortiss/env-var",
  "keywords": [
    "get",
    "env",
    "process.env",
    "process",
    "var",
    "environment",
    "variables",
    "variable",
    "loader",
    "env-var",
    "config",
    "configuration",
    "settings"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "env-var",
  "optionalDependencies": {},
  "readme": "# env-var\n\n[![Travis CI](https://travis-ci.org/evanshortiss/env-var.svg?branch=master)](https://travis-ci.org/evanshortiss/env-var)\n[![Coverage Status](https://coveralls.io/repos/github/evanshortiss/env-var/badge.svg?branch=master)](https://coveralls.io/github/evanshortiss/env-var?branch=master)\n[![npm version](https://badge.fury.io/js/env-var.svg)](https://badge.fury.io/js/env-var)\n[![TypeScript](https://badges.frapsoft.com/typescript/code/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n\nsolution for loading and sanatizing environment variables in node.js with correct typings\n\n## Install\n\n```\nnpm install env-var --save\n```\n\n## Example\nIn the example below we read the environment variable *PARALLEL_LIMIT*, ensure\nit is set (required), and parse it to an integer.\n\n```js\nvar PARALLEL_LIMIT = env('PARALLEL_LIMIT').required().asPositiveInt();\n```\n\nHere's what each piece of this code means:\n\n1. If *PARALLEL_LIMIT* is not set _required()_ will raise an exception.\n2. If it is set, but not a positive integer _asPositiveInt()_ will raise an\nexception.\n3. If #1 and #2 do not raise an exception, the number will be returned as a\nvalid JavaScript number type.\n\n## Overview\nOver time it became apparent that parsing environment variables is a\nrepetitive task, and testing code that relies on them is cumbersome unless\nusing an inversion of control system for declaring modules so we can inject a\nfake *process.env*.\n\nTake this example:\n\n```js\nvar assert = require('assert');\n\n// Our program requires this var to be set\nassert.notEqual(\n  process.env.MAX_BATCH_SIZE,\n  undefined,\n  'MAX_BATCH_SIZE environment variable must be set'\n);\n\n// Read the var, and use parseInt to make it a number\nvar MAX_BATCH_SIZE = parseInt(process.env.MAX_BATCH_SIZE, 10);\n\n// Check the var is a valid number, if not throw\nassert(\n  typeof MAX_BATCH_SIZE === 'number' && !isNaN(MAX_BATCH_SIZE),\n  'MAX_BATCH_SIZE env var must be a valid number'\n);\n```\n\nWith *env-var* the example above can be written cleanly:\n\n```js\nvar env = require('env-var');\n\nvar MAX_BATCH_SIZE = env('MAX_BATCH_SIZE').required().asInt();\n```\n\nWhen it comes to testing code that relies on environment variables this is also\ngreat since you can mock out *env-var* using *proxyquire* to easily alter\nresults returned without having to share state via *process.env*. A\ndemonstration of this is at the bottom of the README.\n\n\n## API\nThe API is just a single function that's exposed, let's call it _env_.\n\n### env([varname, [default]])\nYou can call this function 3 different ways:\n\n1. Calling without arguments will return the entire _process.env_ Object.\n2. Calling with _varname_ will return a variable instance with utilities for\nparsing variables and is detailed below.\n3. Calling with _varname_, and _default_ will return the value for _varname_\nset on process.env, or if the variable is not set _default_ run through the\nvariable instance functions as though it was set on *process.env*.\n\n### variable\nA returned variable has the following functions defined for parsing to the\nrequired format.\n\n#### required()\nEnsure the variable is set on *process.env*, if not an exception will be thrown.\n\n#### asInt()\nAttempt to parse the variable to an integer. Throws an exception if parsing\nfails. This is a strict check, meaning that if the *process.env* value is 1.2,\nan exception will be raised rather than rounding up/down.\n\n#### asPositiveInt()\nPerforms the same task as _asInt()_, but also verifies that the number is\npositive (greater than or equal to zero).\n\n#### asNegativeInt()\nPerforms the same task as _asInt()_, but also verifies that the number is\nnegative (less than zero).\n\n#### asFloat()\nAttempt to parse the variable to a float. Throws an exception if parsing fails.\n\n#### asString()\nReturn the variable value as a String. Throws an exception if value is not a\nString. It's highly unlikely that a variable will not be a String since all\n*process.env* entries you set in bash are Strings by default.\n\n#### asBool()\nAttempt to parse the variable to a Boolean. Throws an exception if parsing\nfails. The var must be set to either \"true\", \"false\" (upper or lowercase),\n0 or 1 to succeed.\n\n#### asStrictBool()\nAttempt to parse the variable to a Boolean. Throws an exception if parsing\nfails. The var must be set to either \"true\" or \"false\" (upper or lowercase) to\nsucceed.\n\n#### asJson()\nAttempt to parse the variable to a JSON Object or Array. Throws an exception if\nparsing fails.\n\n#### asJsonArray()\nThe same as _asJson_ but checks that the data is a JSON Array, e.g [1,2].\n\n#### asJsonObject()\nThe same as _asJson_ but checks that the data is a JSON Object, e.g {a: 1}.\n\n#### asArray([delimiter])\nReads an environment variable as a string, then splits it on each occurence of\nthe specified _delimiter_. By default a comma is used as the delimiter. For\nexample a var set to \"1,2,3\" would become ['1', '2', '3'].\n\n\n## Example\n\n```js\nvar env = require('env-var');\n\n// Normally these would be set using \"export VARNAME\" or similar in bash\nprocess.env.STRING = 'test';\nprocess.env.INTEGER = '12';\nprocess.env.BOOL = 'false';\nprocess.env.JSON = '{\"key\":\"value\"}';\nprocess.env.COMMA_ARRAY = '1,2,3';\nprocess.env.DASH_ARRAY = '1-2-3';\n\n// The entire process.env object\nvar allVars = env();\n\n// Returns a string. Throws an exception if not set\nvar stringVar = env('STRING').required().asString();\n\n// Returns an int, undefined if not set, or throws if set to a non integer value\nvar intVar = env('INTEGER').asInt();\n\n// Return a float, or 23.2 if not set\nvar floatVar = env('FLOAT', '23.2').asFloat();\n\n// Return a Boolean. Throws an exception if not set or parsing fails\nvar boolVar = env('BOOL').required().asBool();\n\n// Returns a JSON Object, undefined if not set, or throws if set to invalid JSON\nvar jsonVar = env('JSON').asJson();\n\n// Returns an array if defined, or undefined if not set\nvar commaArray = env('COMMA_ARRAY').asArray();\n\n// Returns an array if defined, or undefined if not set\nvar commaArray = env('DASH_ARRAY').asArray('-');\n```\n\n\n## Testing Overview\n\nWhen testing code that relies on environment variables sometimes we need to\nmock out/set the environment variables. Having calls to _process.env_ strewn\nthroughout a test is and can get confusing and modifies global state (not good).\n\nIt's better to use *env-var* and its built-in `mock()` function. Using `mock()`\nwill allow you to create a mocked version of env-var which will use a literal\nobject **instead** of using _process.env_. You can use this mocked version with\nsomething like Proxyquire. For example:\n\n```js\n/**\n * filename: concat.js\n * Reads in a var and constructs a string by adding the var name plus its value\n */\n\nvar env = require('env-var');\n\nexports.concat = function (envVarToGet) {\n  return envVarToGet + ' ' + env(envVarToGet).asString();\n};\n```\n\n```js\n/**\n * filename: concat.test.js\n * Reads in a var and constructs a string by adding the var name plus its value\n */\n\nvar expect = require('chai').expect;\nvar proxyquire = require('proxyquire');\nvar env = require('env-var');\n\ndescribe('concat.js', function () {\n\n  var mod;\n\n  beforeEach(function () {\n    // Require our concat file, but replace env-var with a mocked version.\n    // This mocked version will NOT use process.env\n    mod = proxyquire('./concat', {\n      'env-var': env.mock({\n        HELLO: 'WORLD'\n      })\n    });\n\n  });\n\n  describe('#concat', function () {\n    it('should combine our var name and its returned value', function () {\n      expect(mod.concat('HELLO')).to.equal('HELLO WORLD');\n    });\n  });\n});\n\n```\n\n## TypeScript\nTo use with TypeScript, just import it like this:\n```ts\nimport env from 'get-env';\n\nconst stringVar = env('STRING').required().asString();\n```\n\n## Contributors\n* @MikeyBurkman\n* @itavy\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/evanshortiss/env-var.git"
  },
  "scripts": {
    "check-coverage": "nyc check-coverage --statements 100 --branches 100 --functions 100 --lines 100",
    "coverage": "nyc mocha test/ && nyc report --reporter=lcov",
    "coveralls": "npm run coverage && cat coverage/lcov.info | coveralls",
    "test": "npm run unit && npm run coverage && npm run check-coverage",
    "unit": "mocha test/"
  },
  "typings": "env-var.d.ts",
  "version": "2.4.3"
}
