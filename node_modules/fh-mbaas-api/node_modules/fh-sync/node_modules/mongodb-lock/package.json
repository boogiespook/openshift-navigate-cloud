{
  "_args": [
    [
      {
        "raw": "mongodb-lock@https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
        "scope": null,
        "escapedName": "mongodb-lock",
        "name": "mongodb-lock",
        "rawSpec": "https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
        "spec": "https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
        "type": "remote"
      },
      "/Users/briangallagher/dev/apps/openshiftnavigate/OpenShiftNavigate-Navigate/node_modules/fh-mbaas-api"
    ]
  ],
  "_from": "mongodb-lock@0.4.0",
  "_id": "mongodb-lock@0.4.0",
  "_inCache": true,
  "_location": "/fh-mbaas-api/fh-sync/mongodb-lock",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongodb-lock@https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
    "scope": null,
    "escapedName": "mongodb-lock",
    "name": "mongodb-lock",
    "rawSpec": "https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
    "spec": "https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/fh-mbaas-api/fh-sync"
  ],
  "_resolved": "https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
  "_shasum": "9a930fd28e407234f71c8fc538611bef26bc84f3",
  "_shrinkwrap": null,
  "_spec": "mongodb-lock@https://registry.npmjs.org/mongodb-lock/-/mongodb-lock-0.4.0.tgz",
  "_where": "/Users/briangallagher/dev/apps/openshiftnavigate/OpenShiftNavigate-Navigate/node_modules/fh-mbaas-api",
  "author": {
    "name": "Andrew Chilton",
    "email": "andychilton@gmail.com",
    "url": "http://chilts.org/"
  },
  "bugs": {
    "url": "http://github.com/chilts/mongodb-lock/issues"
  },
  "dependencies": {},
  "description": "Locks which uses MongoDB's atomic operations.",
  "devDependencies": {
    "mongodb": "^1.4.19",
    "tape": "^3.0.1"
  },
  "homepage": "https://github.com/chilts/mongodb-lock",
  "keywords": [
    "mongodb",
    "lock"
  ],
  "license": "MIT",
  "main": "mongodb-lock.js",
  "name": "mongodb-lock",
  "optionalDependencies": {},
  "readme": "# mongodb-lock #\n\n[![Build Status](https://travis-ci.org/chilts/mongodb-lock.png)](https://travis-ci.org/chilts/mongodb-lock)\n[![NPM](https://nodei.co/npm/mongodb-lock.png?mini=true)](https://nodei.co/npm/mongodb-lock/)\n\nA really light-weight way to get distributed locks with a nice API if you're already using MongoDB.\n## Synopsis ##\n\nCreate a connection to your MongoDB database, and use it to create a lock object:\n\n```js\nvar mongodb = require('mongodb')\nvar mongoDbLock = require('mongodb-lock')\n\nvar con = 'mongodb://localhost:27017/test'\n\nmongodb.MongoClient.connect(con, function(err, db) {\n  // supply the database, the collection to use and the lock name\n  var lock = mongoDbLock(db, 'locks', 'database-backup')\n})\n```\n\nNow, acquire the lock:\n\n```js\nlock.acquire(function(err, code) {\n  if (err) {\n    return console.error(code)\n  }\n\n  if ( code ) {\n    // lock was acquired\n    console.log('code=' + code)\n  }\n  else {\n    // lock was not acquired\n  }\n})\n```\n\nOnce you have a lock, you have a 30 second timeout until the lock is released. You can release it earlier by supplying the code:\n\n```js\nlock.release(code, function(err, ok) {\n  if (err) {\n    return console.error(err)\n  }\n\n  if (ok) {\n    console.log('Lock released ok')\n  }\n  else {\n    console.log(\"Lock was not released, perhaps it's already been released or timed out\")\n  }\n})\n```\n\n## MongoDB Indexes ##\n\nYou should make sure any indexes have been added to the collection to make the queries faster:\n\n```js\nlock.ensureIndexes(function(err) {\n  if (err) {\n    return console.error(err)\n  }\n  // all ok\n})\n```\n\n## Multiple Locks ##\n\nMultiple locks can use the same collection and operate quite independently:\n\n```js\nvar dbBackupLock = mongoDbLock(db, 'locks', 'database-backup')\nvar hourlyStats = mongoDbLock(db, 'locks', 'hourly-stats')\nvar sendInvoices = mongoDbLock(db, 'locks', 'send-invoices')\n```\n\n## Options ##\n\nCurrently there are two options: `timeout` and `removeExpired`\n\n### timeout ###\nCurrently the default is 30 seconds, but you can change it (in milliseconds):\n\n```js\n// lock for 60 seconds\nvar uploadFiles = mongoDbLock(db, 'locks', 'upload-files', { timeout : 60 * 1000})\n\nuploadFiles.lock(function(err, code) {\n  // locked for 60s\n})\n```\n\n### removeExpired\nCurrently the default value is `false`.\n\nWhen set to `true` this will remove expired lock records from MongoDB instead \nof modifying them.\n\n\n### 0.2.0 (2015-04-17) ###\n\n* [FIX] made sure that a 2nd .release() doesn't return ok (ie. it didn't do anything)\n\n### 0.1.0 (2015-04-17) ###\n\n* [NEW] added ability to add indexes to MongoDB\n* [NEW] added lock()\n* [NEW] added release()\n\n## Author ##\n\nWritten by [Andrew Chilton](http://chilts.org/) -\n[Twitter](https://twitter.com/andychilton).\n\n## License ##\n\nMIT - http://chilts.mit-license.org/2014/\n\n(Ends)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chilts/mongodb-lock.git"
  },
  "scripts": {
    "test": "set -e; for FILE in test/*.js; do node $FILE; done"
  },
  "version": "0.4.0"
}
