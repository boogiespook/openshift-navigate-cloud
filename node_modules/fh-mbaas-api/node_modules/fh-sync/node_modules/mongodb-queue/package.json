{
  "_args": [
    [
      {
        "raw": "mongodb-queue@git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
        "scope": null,
        "escapedName": "mongodb-queue",
        "name": "mongodb-queue",
        "rawSpec": "git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
        "spec": "git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
          "sshUrl": "git+ssh://git@github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
          "httpsUrl": "git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
          "gitUrl": "git://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
          "shortcut": "github:david-martin/mongodb-queue#3867a46ea028b0c327d583492b8c566460a8e7f8",
          "directUrl": "https://raw.githubusercontent.com/david-martin/mongodb-queue/3867a46ea028b0c327d583492b8c566460a8e7f8/package.json"
        }
      },
      "/Users/briangallagher/dev/apps/openshiftnavigate/OpenShiftNavigate-Navigate/node_modules/fh-mbaas-api"
    ]
  ],
  "_from": "git+https://github.com/david-martin/mongodb-queue.git#ttl-index-01",
  "_id": "mongodb-queue@3.1.0",
  "_inCache": true,
  "_location": "/fh-mbaas-api/fh-sync/mongodb-queue",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongodb-queue@git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
    "scope": null,
    "escapedName": "mongodb-queue",
    "name": "mongodb-queue",
    "rawSpec": "git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
    "spec": "git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
      "sshUrl": "git+ssh://git@github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
      "httpsUrl": "git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
      "gitUrl": "git://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
      "shortcut": "github:david-martin/mongodb-queue#3867a46ea028b0c327d583492b8c566460a8e7f8",
      "directUrl": "https://raw.githubusercontent.com/david-martin/mongodb-queue/3867a46ea028b0c327d583492b8c566460a8e7f8/package.json"
    }
  },
  "_requiredBy": [
    "/fh-mbaas-api/fh-sync"
  ],
  "_resolved": "git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
  "_shasum": "ce6610b3eabd7660a789b87afb0548552a6e0a3e",
  "_shrinkwrap": null,
  "_spec": "mongodb-queue@git+https://github.com/david-martin/mongodb-queue.git#3867a46ea028b0c327d583492b8c566460a8e7f8",
  "_where": "/Users/briangallagher/dev/apps/openshiftnavigate/OpenShiftNavigate-Navigate/node_modules/fh-mbaas-api",
  "author": {
    "name": "Andrew Chilton",
    "email": "andychilton@gmail.com",
    "url": "http://chilts.org/"
  },
  "bugs": {
    "url": "http://github.com/chilts/mongodb-queue/issues"
  },
  "dependencies": {},
  "description": "Message queues which uses MongoDB.",
  "devDependencies": {
    "async": "^1.5.0",
    "mongodb": "^2.0.48",
    "tape": "^4.2.2"
  },
  "gitHead": "3867a46ea028b0c327d583492b8c566460a8e7f8",
  "homepage": "https://github.com/chilts/mongodb-queue",
  "keywords": [
    "mongodb",
    "queue"
  ],
  "license": "MIT",
  "main": "mongodb-queue.js",
  "name": "mongodb-queue",
  "optionalDependencies": {},
  "readme": "# mongodb-queue #\n\n[![Build Status](https://travis-ci.org/chilts/mongodb-queue.png)](https://travis-ci.org/chilts/mongodb-queue) [![NPM](https://nodei.co/npm/mongodb-queue.png?mini=true)](https://nodei.co/npm/mongodb-queue/)\n\nA really light-weight way to create queues with a nice API if you're already\nusing MongoDB.\n\n## Synopsis ##\n\nCreate a connection to your MongoDB database, and use it to create a queue object:\n\n```js\nvar mongodb = require('mongodb')\nvar mongoDbQueue = require('mongodb-queue')\n\nvar con = 'mongodb://localhost:27017/test'\n\nmongodb.MongoClient.connect(con, function(err, db) {\n    var queue = mongoDbQueue(db, 'my-queue')\n})\n```\n\nAdd a message to a queue:\n\n```js\nqueue.add('Hello, World!', function(err, id) {\n    // Message with payload 'Hello, World!' added.\n    // 'id' is returned, useful for logging.\n})\n```\n\nGet a message from the queue:\n\n```js\nqueue.get(function(err, msg) {\n    console.log('msg.id=' + msg.id)\n    console.log('msg.ack=' + msg.ack)\n    console.log('msg.payload=' + msg.payload) // 'Hello, World!'\n    console.log('msg.tries=' + msg.tries)\n})\n```\n\nPing a message to keep it's visibility open for long-running tasks\n\n```js\nqueue.ping(msg.ack, function(err, id) {\n    // Visibility window now increased for this message id.\n    // 'id' is returned, useful for logging.\n})\n```\n\nAck a message (and remove it from the queue):\n\n```js\nqueue.ack(msg.ack, function(err, id) {\n    // This msg removed from queue for this ack.\n    // The 'id' of the message is returned, useful for logging.\n})\n```\n\nBy default, all old messages - even processed ones - are left in MongoDB. This is so that\nyou can go and analyse them if you want. However, you can call the following function\nto remove processed messages:\n\n```js\nqueue.clean(function(err) {\n    // All processed (ie. acked) messages have been deleted\n})\n```\n\nAnd if you haven't already, you should call this to make sure indexes have\nbeen added in MongoDB. Of course, if you've called this once (in some kind\none-off script) you don't need to call it in your program. Of course, check\nthe changelock to see if you need to update them with new releases:\n\n```js\nqueue.createIndexes(function(err, indexName) {\n    // The indexes needed have been added to MongoDB.\n})\n```\n\n## Creating a Queue ##\n\nTo create a queue, call the exported function with the `MongoClient`, the name\nand a set of opts. The MongoDB collection used is the same name as the name\npassed in:\n\n```\nvar mongoDbQueue = require('mongodb-queue')\n\n// an instance of a queue\nvar queue1 = mongoDbQueue(db, 'a-queue')\n// another queue which uses the same collection as above\nvar queue2 = mongoDbQueue(db, 'a-queue')\n```\n\nUsing `queue1` and `queue2` here won't interfere with each other and will play along nicely, but that's not\na good idea code-wise - just use the same object. This example is for illustrative purposes only.\n\nNote: Don't use the same queue name twice with different options, otherwise behaviour is undefined and again\nit's not something you should do.\n\nTo pass in options for the queue:\n\n```\nvar resizeQueue = mongoDbQueue(db, 'resize-queue', { visibility : 30, delay : 15 })\n```\n\nThis example shows a queue with a message visibility of 30s and a delay to each message of 15s.\n\n## Options ##\n\n### name ###\n\nThis is the name of the MongoDB Collection you wish to use to store the messages.\nEach queue you create will be it's own collection.\n\ne.g.\n\n```\nvar resizeImageQueue = mongoDbQueue(db, 'resize-image-queue')\nvar notifyOwnerQueue = mongoDbQueue(db, 'notify-owner-queue')\n```\n\nThis will create two collections in MongoDB called `resize-image-queue` and `notify-owner-queue`.\n\n### visibility - Message Visibility Window ###\n\nDefault: `30`\n\nBy default, if you don't ack a message within the first 30s after receiving it,\nit is placed back in the queue so it can be fetched again. This is called the\nvisibility window.\n\nYou may set this visibility window on a per queue basis. For example, to set the\nvisibility to 15 seconds:\n\n```\nvar queue = mongoDbQueue(db, 'queue', { visibility : 15 })\n```\n\nAll messages in this queue now have a visibility window of 15s, instead of the\ndefault 30s.\n\n### delay - Delay Messages on Queue ###\n\nDefault: `0`\n\nWhen a message is added to a queue, it is immediately available for retrieval.\nHowever, there are times when you might like to delay messages coming off a queue.\nie. if you set delay to be `10`, then every message will only be available for\nretrieval 10s after being added.\n\nTo delay all messages by 10 seconds, try this:\n\n```\nvar queue = mongoDbQueue(db, 'queue', { delay : 10 })\n```\n\nThis is now the default for every message added to the queue.\n\n### deadQueue - Dead Message Queue ###\n\nDefault: none\n\nMessages that have been retried over `maxRetries` will be pushed to this queue so you can\nautomatically see problem messages.\n\nPass in a queue (that you created) onto which these messages will be pushed:\n\n```js\nvar deadQueue = mongoDbQueue(db, 'dead-queue')\nvar queue = mongoDbQueue(db, 'queue', { deadQueue : deadQueue })\n```\n\nIf you pop a message off the `queue` over `maxRetries` times and have still not acked it,\nit will be pushed onto the `deadQueue` for you. This happens when you `.get()` (not when\nyou miss acking a message in it's visibility window). By doing it when you call `.get()`,\nthe unprocessed message will be received, pushed to the `deadQueue`, acked off the normal\nqueue and `.get()` will check for new messages prior to returning you one (or none).\n\n### maxRetries - Maximum Retries per Message ###\n\nDefault: 5\n\nThis option only comes into effect if you pass in a `deadQueue` as shown above. What this\nmeans is that if an item is popped off the queue `maxRetries` times (e.g. 5) and not acked,\nit will be moved to this `deadQueue` the next time it is tried to pop off. You can poll your\n`deadQueue` for dead messages much like you can poll your regular queues.\n\nThe payload of the messages in the dead queue are the entire messages returned when `.get()`ing\nthem from the original queue.\n\ne.g.\n\nGiven this message:\n\n```\nmsg = {\n  id: '533b1eb64ee78a57664cc76c',\n  ack: 'c8a3cc585cbaaacf549d746d7db72f69',\n  payload: 'Hello, World!',\n  tries: 1 }\n}\n```\n\nIf it is not acked within the `maxRetries` times, then when you receive this same message\nfrom the `deadQueue`, it may look like this:\n\n```\nmsg = {\n  id: '533b1ecf3ca3a76b667671ef',\n  ack: '73872b204e3f7be84050a1ce82c5c9c0',\n  payload: {\n    id: '533b1eb64ee78a57664cc76c',\n    ack: 'c8a3cc585cbaaacf549d746d7db72f69',\n    payload: 'Hello, World!',\n    tries: 5 }\n  },\n  tries: 1\n}\n```\n\nNotice that the payload from the `deadQueue` is exactly the same as the original message\nwhen it was on the original queue (except with the number of tries set to 5).\n\n## Operations ##\n\n### .add() ###\n\nYou can add a string to the queue:\n\n```js\nqueue.add('Hello, World!', function(err, id) {\n    // Message with payload 'Hello, World!' added.\n    // 'id' is returned, useful for logging.\n})\n```\n\nOr add an object of your choosing:\n\n```js\nqueue.add({ err: 'E_BORKED', msg: 'Broken' }, function(err, id) {\n    // Message with payload { err: 'E_BORKED', msg: 'Broken' } added.\n    // 'id' is returned, useful for logging.\n})\n```\n\nOr add multiple messages:\n\n```js\nqueue.add(['msg1', 'msg2', 'msg3'], function(err, ids) {\n    // Messages with payloads 'msg1', 'msg2' & 'msg3' added.\n    // All 'id's are returned as an array, useful for logging.\n})\n```\n\nYou can delay individual messages from being visible by passing the `delay` option:\n\n```js\nqueue.add('Later', { delay: 120 }, function(err, id) {\n    // Message with payload 'Later' added.\n    // 'id' is returned, useful for logging.\n    // This message won't be available for getting for 2 mins.\n})\n```\n\n### .get() ###\n\nRetrieve a message from the queue:\n\n```js\nqueue.get(function(err, msg) {\n    // You can now process the message\n    // IMPORTANT: The callback will not wait for an message if the queue is empty.  The message will be undefined if the queue is empty.\n})\n```\n\nYou can choose the visibility of an individual retrieved message by passing the `visibility` option:\n\n```js\nqueue.get({ visibility: 10 }, function(err, msg) {\n    // You can now process the message for 10s before it goes back into the queue if not ack'd instead of the duration that is set on the queue in general\n})\n```\n\nMessage will have the following structure:\n\n```js\n{\n  id: '533b1eb64ee78a57664cc76c', // ID of the message\n  ack: 'c8a3cc585cbaaacf549d746d7db72f69', // ID for ack and ping operations\n  payload: 'Hello, World!', // Payload passed when the message was addded\n  tries: 1 // Number of times this message has been retrieved from queue without being ack'd\n}\n```\n\n### .ack() ###\n\nAfter you have received an item from a queue and processed it, you can delete it\nby calling `.ack()` with the unique `ackId` returned:\n\n```js\nqueue.get(function(err, msg) {\n    queue.ack(msg.ack, function(err, id) {\n        // this message has now been removed from the queue\n    })\n})\n```\n\n### .ping() ###\n\nAfter you have received an item from a queue and you are taking a while\nto process it, you can `.ping()` the message to tell the queue that you are\nstill alive and continuing to process the message:\n\n```js\nqueue.get(function(err, msg) {\n    queue.ping(msg.ack, function(err, id) {\n        // this message has had it's visibility window extended\n    })\n})\n```\n\nYou can also choose the visibility time that gets added by the ping operation by passing the `visibility` option:\n\n```js\nqueue.get(function(err, msg) {\n    queue.ping(msg.ack, { visibility: 10 }, function(err, id) {\n        // this message has had it's visibility window extended by 10s instead of the visibilty set on the queue in general\n    })\n})\n```\n\n### .total() ###\n\nReturns the total number of messages that has ever been in the queue, including\nall current messages:\n\n```js\nqueue.total(function(err, count) {\n    console.log('This queue has seen %d messages', count)\n})\n```\n\n### .size() ###\n\nReturns the total number of messages that are waiting in the queue.\n\n```js\nqueue.size(function(err, count) {\n    console.log('This queue has %d current messages', count)\n})\n```\n\n### .inFlight() ###\n\nReturns the total number of messages that are currently in flight. ie. that\nhave been received but not yet acked:\n\n```js\nqueue.inFlight(function(err, count) {\n    console.log('A total of %d messages are currently being processed', count)\n})\n```\n\n### .done() ###\n\nReturns the total number of messages that have been processed correctly in the\nqueue:\n\n```js\nqueue.done(function(err, count) {\n    console.log('This queue has processed %d messages', count)\n})\n```\n\n### .clean() ###\n\nDeletes all processed mesages from the queue. Of course, you can leave these hanging around\nif you wish, but delete them if you no longer need them. Perhaps do this using `setInterval`\nfor a regular cleaning:\n\n```js\nqueue.clean(function(err) {\n    console.log('The processed messages have been deleted from the queue')\n})\n```\n\n### Notes about Numbers ###\n\nIf you add up `.size() + .inFlight() + .done()` then you should get `.total()`\nbut this will only be approximate since these are different operations hitting the database\nat slightly different times. Hence, a message or two might be counted twice or not at all\ndepending on message turnover at any one time. You should not rely on these numbers for\nanything but are included as approximations at any point in time.\n\n## Use of MongoDB ##\n\nWhilst using MongoDB recently and having a need for lightweight queues, I realised\nthat the atomic operations that MongoDB provides are ideal for this kind of job.\n\nSince everything it atomic, it is impossible to lose messages in or around your\napplication. I guess MongoDB could lose them but it's a safer bet it won't compared\nto your own application.\n\nAs an example of the atomic nature being used, messages stay in the same collection\nand are never moved around or deleted, just a couple of fields are set, incremented\nor deleted. We always use MongoDB's excellent `collection.findAndModify()` so that\neach message is updated atomically inside MongoDB and we never have to fetch something,\nchange it and store it back.\n\n## Note on MongoDB Version ##\n\nWhen using MongoDB v2.6 and the v1.3.23 version of the mongodb driver from npm, I was getting\na weird error similar to \"key $exists must not start with '$'\". Yes, very strange. Anyway, the fix\nis to install a later version of the driver. I have tried this with v1.4.9 and it seems ok.\n\n## Releases ##\n\nYay! We made it to v1.0. This means that development may slow down but to be honest, I have pretty\nmuch all of the functionality I want in this thing done. Thanks to everyone for feedback, reports\nand pull requests.\n\n### 2.1.0 (2016-04-21) ###\n\n* [FIX] Fix to indexes (thanks https://github.com/ifightcrime) when lots of messages\n\n### 2.0.0 (2014-11-12) ###\n\n* [NEW] Update MongoDB API from v1 to v2 (thanks https://github.com/hanwencheng)\n\n### 1.0.1 (2015-05-25) ###\n\n* [NEW] Test changes only\n\n### 1.0.0 (2014-10-30) ###\n\n* [NEW] Ability to specify a visibility window when getting a message (thanks https://github.com/Gertt)\n\n### 0.9.1 (2014-08-28) ###\n\n* [NEW] Added .clean() method to remove old (processed) messages\n* [NEW] Add 'delay' option to queue.add() so individual messages can be delayed separately\n* [TEST] Test individual 'delay' option for each message\n\n### 0.7.0 (2014-03-24) ###\n\n* [FIX] Fix .ping() so only visible/non-deleted messages can be pinged\n* [FIX] Fix .ack() so only visible/non-deleted messages can be pinged\n* [TEST] Add test to make sure messages can't be acked twice\n* [TEST] Add test to make sure an acked message can't be pinged\n* [INTERNAL] Slight function name changes, nicer date routines\n\n### 0.6.0 (2014-03-22) ###\n\n* [NEW] The msg.id is now returned on successful Queue.ping() and Queue.ack() calls\n* [NEW] Call quueue.ensureIndexes(callback) to create them\n* [CHANGE] When a message is acked, 'deleted' is now set to the current time (not true)\n* [CHANGE] The queue is now created synchronously\n\n### 0.5.0 (2014-03-21) ###\n\n* [NEW] Now adds two indexes onto the MongoDB collection used for the message\n* [CHANGE] The queue is now created by calling the async exported function\n* [DOC] Update to show how the queues are now created\n\n### 0.4.0 (2014-03-20) ###\n\n* [NEW] Ability to ping retrieved messages a. la. 'still alive' and 'extend visibility'\n* [CHANGE] Removed ability to have different queues in the same collection\n* [CHANGE] All queues are now stored in their own collection\n* [CHANGE] When acking a message, only need ack (no longer need id)\n* [TEST] Added test for pinged messages\n* [DOC] Update to specify each queue will create it's own MongoDB collection\n* [DOC] Added docs for option `delay`\n* [DOC] Added synopsis for Queue.ping()\n* [DOC] Removed use of msg.id when calling Queue.ack()\n\n### 0.3.1 (2014-03-19) ###\n\n* [DOC] Added documentation for the `delay` option\n\n### 0.3.0 (2014-03-19) ###\n\n* [NEW] Return the message id when added to a queue\n* [NEW] Ability to set a default delay on all messages in a queue\n* [FIX] Make sure old messages (outside of visibility window) aren't deleted when acked\n* [FIX] Internal: Fix `queueName`\n* [TEST] Added test for multiple messages\n* [TEST] Added test for delayed messages\n\n### 0.2.1 (2014-03-19) ###\n\n* [FIX] Fix when getting messages off an empty queue\n* [NEW] More Tests\n\n### 0.2.0 (2014-03-18) ###\n\n* [NEW] messages now return number of tries (times they have been fetched)\n\n### 0.1.0 (2014-03-18) ###\n\n* [NEW] add messages to queues\n* [NEW] fetch messages from queues\n* [NEW] ack messages on queues\n* [NEW] set up multiple queues\n* [NEW] set your own MongoDB Collection name\n* [NEW] set a visibility timeout on a queue\n\n## Author ##\n\nWritten by [Andrew Chilton](http://chilts.org/) -\n[Twitter](https://twitter.com/andychilton).\n\n## License ##\n\nMIT - http://chilts.mit-license.org/2014/\n\n(Ends)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chilts/mongodb-queue.git"
  },
  "scripts": {
    "test": "set -e; for FILE in test/*.js; do node $FILE; done"
  },
  "version": "3.1.0"
}
